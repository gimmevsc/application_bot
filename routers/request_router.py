import asyncio
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)
import time

from shared.enums import EUserStatus
from shared.task_manager import TaskManager
from .command_router import UserState
from shared.keyboards import frequency_keyboard, stop_keyboard, start_keyboard
from shared.funcs import (
    is_valid_url,
    update_applications,
    user_in_db,
    load_users_data_db,
    # get_start_keyboard,
    get_start_keyboard_db,
    exist_domain,
    # get_duration_keyboard,
    get_duration_keyboard_db,
    save_users,
    extract_domain,
    get_user_status_db,
    is_demo_limit_reached,
    users,
)
from shared.config import (
    active_sending,
    active_sessions,
    active_tasks,
    duration_options,
    logger,
    user_durations,
    user_request_counter,
    user_urls,
    user_frequencies,
    frequency_options,
    DURATION_MAPPING,
    DELAY_MAPPING,
)
from shared.send_request_to_form import send_request_to_form


request_router = Router()

task_manager = TaskManager()


# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫
@request_router.callback_query(
    lambda callback_query: callback_query.data in ["start_requesting", "list_domains"]
)
async def handle_sending_requests(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_status = get_user_status_db(user_id)
    
    if callback_query.data == "start_requesting":
        await callback_query.message.edit_text("–í–∏ –æ–±—Ä–∞–ª–∏: –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–æ–∫")
        if user_status == EUserStatus.DEMO and active_sessions.get(user_id, []):
            await callback_query.message.answer(
                "‚ùå –í –¥–µ–º–æ —Å—Ç–∞—Ç—É—Å—ñ –¥–æ—Å—Ç—É–ø–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ –ª–∏—à–µ –æ–¥–Ω—É —Å–µ—Å—ñ—é."
            )
        elif (
            user_status != EUserStatus.ADMIN #–¥–æ–¥–∞–≤ –∑–∞ 3 —Ç—ñ–∫–µ—Ç–æ–º . –±—É–ª–æ user_status == EUserStatus.DEMO
            and len(active_sessions.get(user_id, [])) > 2
        ):
            await callback_query.message.answer(
                "‚ùå –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –ª–∏—à–µ —Ç—Ä–∏ —Å–µ—Å—ñ—ó –æ–¥–Ω–æ—á–∞—Å–Ω–æ."
            )
        else:
            await initiate_request(callback_query.message, state, user_id)
    elif callback_query.data == "list_domains":
        await callback_query.message.edit_text("–í–∏ –æ–±—Ä–∞–ª–∏: –ê–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó")
        await activate_requesting(callback_query.message, user_id)


# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π
async def activate_requesting(message, user_id):
    user_active_sessions = active_sessions.get(user_id, [])

    if not user_active_sessions:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π.")
    else:
        buttons = [
            [
                InlineKeyboardButton(
                    text=user_active_sessions[id], callback_data=f"remove_session_{id}"
                )
            ]
            for id in range(len(user_active_sessions))
        ]
        await message.answer(
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Å–µ—Å—ñ—é, —è–∫—É —Ö–æ—á–µ—Ç–µ –∑—É–ø–∏–Ω–∏—Ç–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        )


# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ó—É–ø–∏–Ω–∏—Ç–∏ —Å–µ—Å—ñ—é"
@request_router.callback_query(
    lambda callback_query: callback_query.data.startswith("remove_session_")
)
async def handle_remove_session(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        session_id = int(callback_query.data.split("_")[-1])
        print(active_sessions)
        session = active_sessions[user_id][session_id]
        active_sessions[user_id].remove(session)
        
        task = active_tasks[user_id].pop(session)
        task.cancel()
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫
        count_requests = user_request_counter[user_id].pop(session)
        
        update_applications(user_id, count_requests)
        
        # users[user_id]["applications_sent"] += count_requests
        # save_users(users)
        
        await callback_query.message.edit_text(
            f"–°–µ—Å—ñ—è {session} –∑—É–ø–∏–Ω–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ.\n–ó–∞—è–≤–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {count_requests}"
        )
        await activate_requesting(callback_query.message, user_id)
    except ValueError as e:
        await callback_query.message.edit_text("–ù–µ–≤—ñ–¥–æ–º–∞ —Å–µ—Å—ñ—è.")
        return await callback_query.message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—å —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Å–µ—Å—ñ—é.")


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–æ–∫"
@request_router.message(
    lambda message: (UserState.waiting_for_start or UserState.main_menu)
    and message.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–æ–∫"
)
async def initiate_request(message: Message, state: FSMContext, user_id=None):
    user_id = user_id or message.from_user.id
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–æ–∫'")

    # user_data = users.get(user_id, {})
    # applications_sent = user_data.get("applications_sent", 0)
    applications_sent = load_users_data_db(user_id, 'applications_sent')
    user_status = get_user_status_db(user_id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –ª–∏—à–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É demo
    if user_status == EUserStatus.DEMO and is_demo_limit_reached(user_id):
        await message.answer(
            "‚ùå –í–∏ –≤–∂–µ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –≤ 50 –∑–∞—è–≤–æ–∫. –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return

    # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–∫—ñ–ª—å–∫–∏ –∑–∞—è–≤–æ–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
    if user_status == EUserStatus.DEMO:
        requests_to_send = 50 - applications_sent
        if requests_to_send <= 0:
            await message.answer(
                "‚ùå –í–∏ –≤–∂–µ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –≤ 50 –∑–∞—è–≤–æ–∫. –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return
        await message.answer(
            f"üåê –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ –¥–æ {requests_to_send} –∑–∞—è–≤–æ–∫. –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç:"
        )
    else:
        await message.answer("üåê –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç:")

    await state.set_state(UserState.waiting_for_url)


# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç
@request_router.message(UserState.waiting_for_url)
async def handle_url(message: Message, state: FSMContext):
    url = message.text
    user_id = message.from_user.id
    # –†–µ–∞–ª—ñ–∑—É–π—Ç–µ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–º–µ–Ω—É –∑ URL
    domain = extract_domain(url)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –¥–æ–º–µ–Ω —É –≤–∞–π—Ç–ª—ñ—Å—Ç—ñ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    # for data in users.values():
    #     print(domain)
    #     if "whitelist" in data and domain in data["whitelist"]:
    #         return await message.answer(
    #             f"‚ùå –î–æ–º–µ–Ω '{domain}' –≤–∂–µ —ñ—Å–Ω—É—î —É –≤–∞–π—Ç–ª—ñ—Å—Ç—ñ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –¥–æ–º–µ–Ω."
    #         )
    if exist_domain(domain):
        return await message.answer(
                f"‚ùå –î–æ–º–µ–Ω '{domain}' –≤–∂–µ —ñ—Å–Ω—É—î —É –≤–∞–π—Ç–ª—ñ—Å—Ç—ñ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –¥–æ–º–µ–Ω."
            )
    #         return await message.answer(
    #             f"‚ùå –î–æ–º–µ–Ω '{domain}' –≤–∂–µ —ñ—Å–Ω—É—î —É –≤–∞–π—Ç–ª—ñ—Å—Ç—ñ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –¥–æ–º–µ–Ω."
    #         )

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ URL
    if is_valid_url(url):
        user_urls[user_id] = url
        user_active_sessions = active_sessions.get(user_id, [])
        if url in user_active_sessions:
            return await message.answer(
                f"‚ùå –î–æ–º–µ–Ω '{domain}' –≤–∂–µ —ñ—Å–Ω—É—î —É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ—è—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –¥–æ–º–µ–Ω."
            )
        active_sessions[user_id] = user_active_sessions + [url]
        await state.set_state(UserState.waiting_for_frequency)
        await message.answer(
            "üï∞ –Ø–∫ —à–≤–∏–¥–∫–æ –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è –∑–∞—è–≤–∫–∏?", reply_markup=frequency_keyboard
        )
    else:
        await message.answer("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç")


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
@request_router.message(
    lambda message: (
        message.text in frequency_options or message.text in duration_options
    )
    and (UserState.waiting_for_frequency or UserState.waiting_for_duration)
)
async def handle_frequency_and_duration(message: Message, state: FSMContext):
    user_id = message.from_user.id
    # user_data = users.get(user_id, {})
    
    if user_id not in active_tasks:
        active_tasks[user_id] = {}

    # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å—Ç–æ—Ç–∏
    state_name = await state.get_state()
    if state_name == UserState.waiting_for_frequency:
        frequency = message.text
        user_frequencies[user_id] = frequency

        # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å "demo", –æ–±–∏—Ä–∞—î–º–æ —á–∞—Å—Ç–æ—Ç—É, —ñ–≥–Ω–æ—Ä—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
        if get_user_status_db(user_id) == EUserStatus.DEMO:
            active_sending[user_id] = True
            await message.answer(
                "üí´ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±—Ä–∞–Ω–∞. –í–∏–±—ñ—Ä —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ —É –¥–µ–º–æ —Å—Ç–∞—Ç—É—Å—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π."
            )
            website_url = user_urls[user_id]
            await message.answer(
                f"üöÄ –ö–æ—Å–º—ñ—á–Ω–∏–π —à–∞—Ç–ª –∑ –∫—É–ø–æ—é –∑–∞—è–≤–æ–∫ –≤–∂–µ –ª–µ—Ç–∏—Ç—å –Ω–∞ —Å–∞–π—Ç: {website_url}",
                reply_markup=stop_keyboard,
            )

            await task_manager.update_user_context(
                user_id, frequency, website_url, state, message
            )
            # –î–µ–º–æ: —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å None (–±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å)
            active_tasks[user_id][website_url] = asyncio.create_task(
                request_loop(user_id, frequency, website_url, state, message)
            )
            return

        # –î–ª—è —ñ–Ω—à–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤
        await state.set_state(UserState.waiting_for_duration)
        await message.answer(
            "‚è≥ –Ø–∫ –¥–æ–≤–≥–æ –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è –∑–∞—è–≤–∫–∏?",
            reply_markup=get_duration_keyboard_db(user_id),
        )
        return

    # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
    if state_name == UserState.waiting_for_duration:
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–µ–º–æ-—Å—Ç–∞—Ç—É—Å –¥–ª—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
        if get_user_status_db(user_id) != EUserStatus.DEMO:
            user_durations[user_id] = DURATION_MAPPING[message.text]

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –∑–∞–ø—É—Å–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫
        frequency = user_frequencies[user_id]
        active_sending[user_id] = True
        website_url = user_urls[user_id]
        await task_manager.update_user_context(
            user_id,
            frequency,
            website_url,
            state,
            message,
            DURATION_MAPPING.get(message.text, None),
        )
        # –ó–∞–ø—É—Å–∫ request_loop –∑ –≤–∫–∞–∑–∞–Ω–æ—é —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é
        active_tasks[user_id][website_url] = asyncio.create_task(
            request_loop(
                user_id,
                frequency,
                website_url,
                state,
                message,
                DURATION_MAPPING.get(message.text, None),
            )
        )
        await message.answer(
            f"üöÄ –ö–æ—Å–º—ñ—á–Ω–∏–π —à–∞—Ç–ª –∑ –∫—É–ø–æ—é –∑–∞—è–≤–æ–∫ –≤–∂–µ –ª–µ—Ç–∏—Ç—å –Ω–∞ —Å–∞–π—Ç: {website_url}",
            reply_markup=stop_keyboard,
        )
        await state.clear()


async def request_loop(user_id, frequency, url, state, message, duration=None):
    if user_id in user_request_counter:
        user_request_counter[user_id][url] = 0  # –°–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫
    else:
        user_request_counter[user_id] = {url: 0}

    delay = DELAY_MAPPING.get(frequency, 0)
    # user_data = users[user_id]

    # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å demo, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—è–≤–æ–∫ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –æ–±–º–µ–∂—É—î—Ç—å—Å—è
    requests_to_send = (
        50 - load_users_data_db(user_id, 'applications_sent')
        if get_user_status_db(user_id) == EUserStatus.DEMO
        else float("inf")
    )
    # –û–±—á–∏—Å–ª–∏—Ç–∏ —á–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è, —è–∫—â–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –æ–±–º–µ–∂–µ–Ω–∞
    end_time = None
    if duration is not None:
        end_time = time.time() + duration

    # proxy_index = 0
    while active_sending.get(user_id) and requests_to_send > 0:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º
        if end_time is not None and time.time() >= end_time:
            break
        # proxies = await get_works_proxies()
        error_message = await send_request_to_form(url, user_id)
        if error_message:
            await message.answer(
                f"‚ùå {error_message}\n\n–ó–∞—è–≤–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_request_counter[user_id][url]}."
            )
            await task_manager.remove_user_task(
                user_id, url
            )  # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–¥–∞—ái –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            await message.answer(
                "‚¨áÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
                reply_markup=get_start_keyboard_db(user_id),
            )  #  –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ
            break

        if get_user_status_db(user_id) == EUserStatus.DEMO:
            requests_to_send -= 1

        logger.info(f"–ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º: {delay} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(delay)

    # –û–Ω–æ–≤–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫
    request_counter = user_request_counter[user_id][url]

    await task_manager.remove_user_task(user_id, url)  # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–¥–∞—ái –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É

    if active_sending.get(user_id):
        await message.answer(
            f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ {url} –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n‚úâÔ∏è –í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {request_counter}",
            reply_markup=get_start_keyboard_db(
                user_id
            ),  # get_start_keyboard(user_id) –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ
        )

    active_sessions[user_id].remove(url)
    active_tasks[user_id].pop(url)
    await state.set_state(UserState.waiting_for_start)
    
    update_applications(user_id, request_counter)
    
    # users[user_id]["applications_sent"] += request_counter
    # save_users(users)  # –ó–±–µ—Ä–µ–≥—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è


# –û–±—Ä–æ–±–Ω–∏–∫ –∑—É–ø–∏–Ω–∫–∏
@request_router.message(
    lambda message: active_sending.get(message.from_user.id)
    and message.text == "‚ùå –ó—É–ø–∏–Ω–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É"
)
async def stop_sending(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.set_state(UserState.waiting_for_start)
    active_sending[user_id] = False
    for task in active_tasks.get(user_id, {}).values():
        task.cancel()
    active_tasks.pop(user_id, None)
    active_sessions.pop(user_id, None)
    total_requests = 0
    for count_requests in user_request_counter.get(user_id, {}).values():
        total_requests += count_requests
    user_request_counter.pop(user_id, None)

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞—è–≤–æ–∫ —É users.json
    if user_in_db(user_id):
        
        update_applications(user_id, total_requests)
        # users[user_id]["applications_sent"] += total_requests
        # save_users(users)

    await message.answer(
        f"‚≠ïÔ∏è –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ –∑—É–ø–∏–Ω–µ–Ω–∞\n‚úâÔ∏è –í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {total_requests}",
        reply_markup=get_start_keyboard_db(user_id),
    )
