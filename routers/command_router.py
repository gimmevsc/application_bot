from aiogram import Router
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime

from shared.enums import EUserStatus
from shared.filters import MultipleStateFilter
from shared.funcs import (
    # get_start_keyboard,
    get_start_keyboard_db,
    get_user_status_db,
    register_user,
    users,
    prepare_proxy_messages,
    load_proxies,
    load_users_data_db
)
from shared.data import status_translation

commands_router = Router()


class UserState(StatesGroup):
    waiting_for_start = State()
    waiting_for_user_id = State()
    waiting_for_new_status = State()
    waiting_for_domain = State()
    waiting_for_url = State()
    waiting_for_frequency = State()
    waiting_for_duration = State()
    main_menu = State()

    domain_list = State()
    waiting_for_proxy = State()


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@commands_router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    register_user(user_id)
    await state.set_state(UserState.waiting_for_start)
    await message.answer(
        "‚ö°Ô∏è –ü—Ä–∏–≤—ñ—Ç! –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü—å–æ–≥–æ –±–æ—Ç—É —Ç–∏ –º–æ–∂–µ—à –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –±—É–¥—å —è–∫—ñ —Å–∞–π—Ç–∏ –∑ —Ñ–æ—Ä–º–æ—é\n\n"
        "üíé –ú–∏ –º–∞—î–º–æ —Ä—ñ–∑–Ω—ñ —Ä–µ–∂–∏–º–∏ –∑ –≤–∏–±–æ—Ä–æ–º —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —Ç–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫\n"
        "üí° –í—Å—ñ –ø–æ–ª—è, –≤–∏–ø–∞–¥–∞—é—á—ñ —Å–ø–∏—Å–∫–∏, –≥–∞–ª–æ—á–∫–∏ –≤ —Ñ–æ—Ä–º—ñ –Ω–∞ —Å–∞–π—Ç–∞—Ö –∑–∞–ø–æ–≤–Ω—é—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ\n"
        "üîò –ê —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è —Ç–≤–æ—ó—Ö —Å–∞–π—Ç—ñ–≤, —î whitelist –≤ —è–∫–∏–π –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ —Å–∞–π—Ç —ñ —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –Ω–µ –∑–º–æ–∂—É—Ç—å —Å–ø–∞–º–∏—Ç–∏ –Ω–∞ –Ω—å–æ–≥–æ!\n"
        "üî• –¢–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —Ç–∞ –∑–∞–ø—É—Å–∫–∞–π –≤—ñ–¥–ø—Ä–∞–≤–∫—É!",
        reply_markup=get_start_keyboard_db(user_id),
    )


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞"
@commands_router.message(lambda message: message.text == "üßë‚Äçüíª –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
async def support_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚úâÔ∏è –î–ª—è –∑–≤ º—è–∑–∫—É –∑ –Ω–∞–º–∏ –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ ...")


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ—ñ–ª—å"
@commands_router.message(lambda message: message.text == "ü§µ –ü—Ä–æ—Ñ—ñ–ª—å")
async def profile_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.clear()
    # user_data = users.get(user_id, {})
    user_data = load_users_data_db(user_id, '*')
    # print(user_data)
    registration_date = user_data[2]
    # registration_date = user_data.get("registration_date")
    status = user_data[3]
    # status = user_data.get("status", "N/A")
    translated_status = status_translation.get(status, status)
    # total_applications_sent = user_data.get("applications_sent", 0)
    total_applications_sent = user_data[4]

    if registration_date:
        days_since_registration = (
            datetime.now() - datetime.fromisoformat(registration_date)
        ).days
        await message.answer(
            f"<b>ü§µ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
            f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å: {translated_status}\n"
            f"ü™™ –í–∞—à Telegram ID: <code>{user_id}</code>\n"
            f"ü•á –ú–∏ —Ä–∞–∑–æ–º –≤–∂–µ {days_since_registration} –¥–Ω—ñ–≤\n"
            f"üì© –ó–∞–≥–∞–ª–æ–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∑–∞—è–≤–æ–∫: {total_applications_sent}",
            parse_mode="HTML",
        )
    else:
        await message.answer("‚ö†Ô∏è –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É /start")


@commands_router.message(
    lambda message: message.text == "üöÄ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫"
    or message.text == "üöÄ –ú–µ–Ω—é –∑–∞—è–≤–æ–∫"
)
async def start_requesting(message: Message, state: FSMContext):
    await state.set_state(UserState.main_menu)
    buttons = [
        [
            InlineKeyboardButton(
                text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–æ–∫", callback_data="start_requesting"
            )
        ],
        [InlineKeyboardButton(text="üìã –ê–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó", callback_data="list_domains")],
    ]
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )


# Whitelist
@commands_router.message(lambda message: message.text == "üîò Whitelist")
async def show_whitelist_menu(message: Message, state: FSMContext):
    user_id = message.from_user.id

    st = await state.get_state()

    await state.clear()
    # user_data = users.get(user_id, {})
    user_status = get_user_status_db(user_id)
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_status == EUserStatus.DEMO:
        await message.answer("‚ùå –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ —É –ø–ª–∞—Ç–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó –±–æ—Ç—É.")
        return

    whitelist_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìå –î–æ–¥–∞—Ç–∏ –¥–æ–º–µ–Ω")],
            [KeyboardButton(text="üìÉ –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤")],
            [KeyboardButton(text="‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.answer(
        "–í—ñ—Ç–∞—é —É –º–µ–Ω—é –≤–∞–π—Ç–ª–∏—Å—Ç—É! –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=whitelist_keyboard
    )


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥"
@commands_router.message(
    lambda message: message.text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥",
    MultipleStateFilter(UserState.waiting_for_domain, UserState.domain_list),
)
async def back_to_white_list_menu(message: Message, state: FSMContext):
    await show_whitelist_menu(message, state)


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥"
@commands_router.message(lambda message: message.text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥")
async def back_to_main_menu(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏–π —Å—Ç–∞–Ω
    await state.set_state(UserState.main_menu)
    await message.answer(
        "üîô –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_start_keyboard_db(user_id)
    )


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å" –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
@commands_router.message(
    lambda message: get_user_status_db(message.from_user.id) 
    == EUserStatus.ADMIN
    and message.text == "üí† –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å"
)
async def change_status_handler(message: Message, state: FSMContext):
    await state.set_state(UserState.waiting_for_user_id)
    await message.answer(
        "üë§ –í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å:"
    )


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "ü™Ñ –ö–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ" –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
@commands_router.message(
    lambda message: get_user_status_db(message.from_user.id)
    == EUserStatus.ADMIN
    and message.text == "ü™Ñ –ö–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ"
)
async def edit_proxies_handler(message: Message):
    proxies = load_proxies()
    proxy_messages = await prepare_proxy_messages(proxies)
    for text, keyboard in proxy_messages:
        await message.answer(text, reply_markup=keyboard)

    proxi_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–¥–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ")],
            [KeyboardButton(text="‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.answer("‚¨áÔ∏è –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=proxi_keyboard)
